{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","utils/format.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","error","console","log","filter","transaction","_id","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","a","axios","get","res","data","response","id","delete","reponse","config","headers","post","Provider","value","getTransactions","deleteTransaction","addTransaction","numberWithCommas","x","toString","replace","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","useEffect","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b080a07f.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = () => {\n    return (\n        <h2>\n            Expense Tracker\n        </h2>\n    )\n}\n","// App Reducer will help specify app state changes in response to our (global) context\n//  it takes in state and an action\n//  we have 3 action types: default/add/delete transaction\n\n// DELETE_TRANSACTION case- reducer is a way to change the state and send it down to the app\n//  in this case, we have to create a new state (that excludes the deleted transaction)\n//  and pass it down. we create a new one bc we cant really change the existing state\n\nexport default(state, action) => {\n    switch(action.type) {\n        case 'GET_TRANSACTIONS':\n            return {\n                ...state,\n                loading: false,\n                transactions: action.payload // transactions was initially an empty array, no we fill it up with our payload\n            }\n        case 'TRANSACTIONS_ERROR':\n            return {\n                ...state,\n                error: action.payload\n\n            }\n        case 'DELETE_TRANSACTION':\n            console.log(action.payload);\n             return {\n                 ...state,\n                 transactions: \n                 state.transactions.filter(transaction =>\n                     transaction._id !== action.payload)\n             }\n        case 'ADD_TRANSACTION':\n                return {\n                  ...state,\n                  // we add our new transaction to our existing ones\n                  transactions: [...state.transactions, action.payload]\n                }\n        default:\n            return state; \n    }\n}","\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios';\n\n\n// initial state\n\nconst initialState = {\n    transactions: [],\n    error: null,  // bc of our async await calls\n    loading: true // for spinner\n}\n // { id: 1, text: 'Flowers', amount: -20 },\n // { id: 2, text: 'Depop', amount: +25 },\n // { id: 4, text: 'Uber', amount: -11 },\n // { id: 5, text: 'Salary', amount: +2000}\n\n// global state\n// create context\n\nexport const GlobalContext = createContext(initialState);\n\n// in order for other components to have access to our globalState, we need to have a provider\n// we need to wrap all our components in a provider component\n// we need to export this to make it available to our App file\n\n// Provider component \n// all our components that we are wrapping are the children\n// whenever we want to call a reducer action, we call dispatch\n\nexport const GlobalProvider=  ( {children} ) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n    // this function below is to integrate our api\n    // axios returns a PROMISE, so our get action will have to be asynchronous\n    async function getTransactions() {\n        try{\n            // we make a requests and store it in this resposne variable\n            const res = await axios.get('/api/v1/transactions');\n\n            // res.data contains success, count, data. we only want data on the frontend\n            // we need to dispatch to our reducer\n            dispatch ({\n                type: 'GET_TRANSACTIONS',\n                payload: res.data.data\n            });\n        }\n\n        catch(err) {\n            dispatch ({\n            type: 'TRANSACTIONS_ERROR',\n            payload: err.response.data.error\n            });\n        }\n    }\n\n    async function deleteTransaction(id) {\n        try {\n            await axios.delete(`/api/v1/transactions/${id}`);\n            dispatch({\n                type: 'DELETE_TRANSACTION',\n                payload: id\n            });\n\n        } catch (err) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: err.reponse.data.error\n            });\n        \n        }\n    }\n\n\n    async function addTransaction(transaction) {\n        // since we are sending data, we need a content type\n        // so we create a config obj\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n            const res = await axios.post('/api/v1/transactions', transaction, config);\n            dispatch({\n                type: 'ADD_TRANSACTION',\n                payload: res.data.data\n              });\n            \n        } catch (err) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: err.reponse.data.error\n            });\n        }\n      }\n\n// to use an action, we need to make sure we pass it down in the provider\n// so we can access on of these in components\n\n    return( <GlobalContext.Provider value= {{\n        transactions: state.transactions,\n        error: state.error,\n        loading: state.loading,\n        getTransactions,\n        deleteTransaction,\n        addTransaction\n    }}>\n        {children}\n\n    </GlobalContext.Provider>);\n}\n","export function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import React, {useContext} from 'react'\nimport { GlobalContext }  from '../context/GlobalState';\nimport { numberWithCommas } from '../utils/format';\n\nexport const Balance = () => {\n    const { transactions } = useContext(GlobalContext);\n    const amounts = transactions.map(transaction => transaction.amount);\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n\n    return (\n        <>\n            <h4> Your Balance </h4>\n            <h1> ${numberWithCommas(total)} </h1>\n        </>\n    )\n}\n","import React, {useContext} from 'react';\nimport { GlobalContext }  from '../context/GlobalState';\nimport { numberWithCommas } from '../utils/format';\n\n\nexport const IncomeExpenses = () => {\n    const { transactions } = useContext(GlobalContext);\n    const amounts = transactions.map(transaction => transaction.amount);\n\n    const income = amounts\n    .filter(item => item > 0)\n    .reduce((acc,item) => (acc += item),0)\n    .toFixed(2);\n\n    const expense = amounts\n    .filter(item => item <= 0)\n    .reduce((acc,item) => (acc += item),0 *-1)\n    .toFixed(2);\n\n\n    return (\n        <div className=\"inc-exp-container\">\n            <div>\n                <h4> Income </h4>\n                <p className=\"money plus\"> ${numberWithCommas(income)} </p>\n            </div>\n            <div>\n                <h4> Expense</h4>\n                <p className=\"money  minus\"> ${numberWithCommas(expense)} </p>\n            </div>\n        </div>\n\n    )\n}\n","import React, {useContext} from 'react';\nimport { GlobalContext }  from '../context/GlobalState';\nimport { numberWithCommas } from '../utils/format';\n\nexport const Transaction = ({ transaction }) => {\n    const { deleteTransaction } = useContext(GlobalContext);\n    const sign = transaction.amount < 0 ? '-' : '+';\n\n    return (\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\n            {transaction.text} <span>{sign}${numberWithCommas(Math.abs(transaction.amount))} </span>\n            <button\n                className=\"delete-btn\"\n                onClick={() => deleteTransaction(transaction._id)}>\n                x\n                </button>\n        </li>\n    )\n}\n\n","import React, {useContext, useEffect} from 'react';\nimport { GlobalContext }  from '../context/GlobalState';\nimport { Transaction } from './Transaction';\n\n\n// we can pull anything from our GlobalContext using the useContext hook\n\nexport const TransactionList = () => {\n    const { transactions, getTransactions } = useContext(GlobalContext);\n\n    useEffect( () => {\n        getTransactions();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n\n    }, []);\n    // transactions is an array, so we have to loop/map through\n    // to access each element \n    // we pass our current transaction from GlobalContext in as a prop\n    // we map through, and so for each one we're going to render a transaction\n    // component and pass in a prop\n    // since this is a list, it needs to have a unique key\n    return (\n        <>\n        <h3> History </h3>\n        <ul className=\"list\"> \n        {transactions.map(transaction => (\n        < Transaction key={transaction.id} transaction={transaction} />\n        ))}\n\n        </ul>\n            \n        </>\n    )\n}\n","import React, {useState, useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\n// for the form we need component level state, \n// bc we need our inputs to be part of the state, \n// so we introduce a useState hook, called text and setText\n\nexport const AddTransaction = () => { \nconst [text, setText] = useState('');\nconst [amount, setAmount] = useState(0);\n\nconst { addTransaction } = useContext(GlobalContext);\nconst onSubmit = e => {\n    e.preventDefault();\n    const newTransaction = {\n        id: Math.floor(Math.random() * 100000000),\n        text,\n        amount: +amount\n    }\n    // my later edits\n    text === '' || amount === 0 ? setText('') : addTransaction(newTransaction);\n    setText('');\n    setAmount(0);\n}\n    return (\n        <>\n            <h3> Add new transaction</h3>\n            <form onSubmit={onSubmit}>\n                <div className=\"form-control\">\n                    <label htmlFor=\"text\"> Description </label>\n                <input type=\"text\" \n                value={text} \n                onChange={(e) => setText(e.target.value)}\n                placeholder= \"Enter description...\" />\n             </div>\n             <div className=\"form-control\">\n                 <label htmlFor=\"amount\">\n                     Amount <br />\n                    ( - expense, + income ) </label>\n\n                    <input type=\"number\"\n                    value={amount} \n                    onChange={(e) => setAmount(e.target.value)}\n                     placeholder= \"Enter amount...\" />\n             </div>\n        <button className=\"btn\"> Add transaction </button>\n        </form>\n\n        </>\n    )\n}","import React from 'react';\nimport { Header } from './components/Header';\nimport { Balance } from './components/Balance';\nimport { IncomeExpenses } from './components/IncomeExpenses';\nimport { TransactionList } from './components/TransactionList';\nimport { AddTransaction } from './components/AddTransaction';\n\nimport { GlobalProvider } from './context/GlobalState'\nimport './App.css';\n\n// we wrap all our components in a GlobalProvider component\nfunction App() {\n  return (\n    <GlobalProvider >\n    <Header />\n    <div className=\"container\">\n      <Balance />\n      <IncomeExpenses />\n      <TransactionList />\n      <AddTransaction />\n\n    </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}
{"ast":null,"code":"import _regeneratorRuntime from\"/Users/safiyamufti/Desktop/expense-tracker-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import{jsx as _jsx}from\"react/jsx-runtime\";import _asyncToGenerator from\"/Users/safiyamufti/Desktop/expense-tracker-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/safiyamufti/Desktop/expense-tracker-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useReducer}from'react';import AppReducer from'./AppReducer';import axios from'axios';// initial state\nvar initialState={transactions:[],error:null,// bc of our async await calls\nloading:true// for spinner\n};// { id: 1, text: 'Flowers', amount: -20 },\n// { id: 2, text: 'Depop', amount: +25 },\n// { id: 4, text: 'Uber', amount: -11 },\n// { id: 5, text: 'Salary', amount: +2000}\n// global state\n// create context\nexport var GlobalContext=/*#__PURE__*/createContext(initialState);// in order for other components to have access to our globalState, we need to have a provider\n// we need to wrap all our components in a provider component\n// we need to export this to make it available to our App file\n// Provider component \n// all our components that we are wrapping are the children\n// whenever we want to call a reducer action, we call dispatch\nexport var GlobalProvider=function GlobalProvider(_ref){var children=_ref.children;var _useReducer=useReducer(AppReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// Actions\n// this function below is to integrate our api\n// axios returns a PROMISE, so our get action will have to be asynchronous\nfunction getTransactions(){return _getTransactions.apply(this,arguments);}function _getTransactions(){_getTransactions=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get('/api/v1/transactions');case 3:res=_context.sent;// res.data contains success, count, data. we only want data on the frontend\n// we need to dispatch to our reducer\ndispatch({type:'GET_TRANSACTIONS',payload:res.data.data});_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);dispatch({type:'TRANSACTIONS_ERROR',payload:_context.t0.response.data.error});case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return _getTransactions.apply(this,arguments);}function deleteTransaction(_x){return _deleteTransaction.apply(this,arguments);}function _deleteTransaction(){_deleteTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.delete(\"/api/v1/transactions/\".concat(id));case 3:dispatch({type:'DELETE_TRANSACTION',payload:id});_context2.next=9;break;case 6:_context2.prev=6;_context2.t0=_context2[\"catch\"](0);dispatch({type:'TRANSACTION_ERROR',payload:_context2.t0.reponse.data.error});case 9:case\"end\":return _context2.stop();}}},_callee2,null,[[0,6]]);}));return _deleteTransaction.apply(this,arguments);}function addTransaction(_x2){return _addTransaction.apply(this,arguments);}// to use an action, we need to make sure we pass it down in the provider\n// so we can access on of these in components\nfunction _addTransaction(){_addTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(transaction){var config,res;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// since we are sending data, we need a content type\n// so we create a config obj\nconfig={headers:{'Content-Type':'application/json'}};_context3.prev=1;_context3.next=4;return axios.post('/api/v1/transactions',transaction,config);case 4:res=_context3.sent;dispatch({type:'ADD_TRANSACTION',payload:res.data.data});_context3.next=11;break;case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](1);dispatch({type:'TRANSACTION_ERROR',payload:_context3.t0.reponse.data.error});case 11:case\"end\":return _context3.stop();}}},_callee3,null,[[1,8]]);}));return _addTransaction.apply(this,arguments);}return/*#__PURE__*/_jsx(GlobalContext.Provider,{value:{transactions:state.transactions,error:state.error,loading:state.loading,getTransactions:getTransactions,deleteTransaction:deleteTransaction,addTransaction:addTransaction},children:children});};","map":{"version":3,"sources":["/Users/safiyamufti/Desktop/expense-tracker-react/client/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","axios","initialState","transactions","error","loading","GlobalContext","GlobalProvider","children","state","dispatch","getTransactions","get","res","type","payload","data","response","deleteTransaction","id","delete","reponse","addTransaction","transaction","config","headers","post"],"mappings":"kjBACA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,KAAiD,OAAjD,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAGA;AAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,YAAY,CAAE,EADG,CAEjBC,KAAK,CAAE,IAFU,CAEH;AACdC,OAAO,CAAE,IAAK;AAHG,CAArB,CAKC;AACA;AACA;AACA;AAED;AACA;AAEA,MAAO,IAAMC,CAAAA,aAAa,cAAGR,aAAa,CAACI,YAAD,CAAnC,CAEP;AACA;AACA;AAEA;AACA;AACA;AAEA,MAAO,IAAMK,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,iBAClBT,UAAU,CAACC,UAAD,CAAaE,YAAb,CADQ,4CACrCO,KADqC,iBAC9BC,QAD8B,iBAG5C;AACA;AACA;AAL4C,QAM7BC,CAAAA,eAN6B,uJAM5C,iLAG0BV,CAAAA,KAAK,CAACW,GAAN,CAAU,sBAAV,CAH1B,QAGcC,GAHd,eAKQ;AACA;AACAH,QAAQ,CAAE,CACNI,IAAI,CAAE,kBADA,CAENC,OAAO,CAAEF,GAAG,CAACG,IAAJ,CAASA,IAFZ,CAAF,CAAR,CAPR,+EAcQN,QAAQ,CAAE,CACVI,IAAI,CAAE,oBADI,CAEVC,OAAO,CAAE,YAAIE,QAAJ,CAAaD,IAAb,CAAkBZ,KAFjB,CAAF,CAAR,CAdR,oEAN4C,0DA2B7Bc,CAAAA,iBA3B6B,+JA2B5C,kBAAiCC,EAAjC,8JAEclB,CAAAA,KAAK,CAACmB,MAAN,gCAAqCD,EAArC,EAFd,QAGQT,QAAQ,CAAC,CACLI,IAAI,CAAE,oBADD,CAELC,OAAO,CAAEI,EAFJ,CAAD,CAAR,CAHR,kFASQT,QAAQ,CAAC,CACLI,IAAI,CAAE,mBADD,CAELC,OAAO,CAAE,aAAIM,OAAJ,CAAYL,IAAZ,CAAiBZ,KAFrB,CAAD,CAAR,CATR,qEA3B4C,4DA6C7BkB,CAAAA,cA7C6B,oDAoEhD;AACA;AArEgD,mGA6C5C,kBAA8BC,WAA9B,qIACI;AACA;AACMC,MAHV,CAGmB,CACXC,OAAO,CAAE,CACL,eAAgB,kBADX,CADE,CAHnB,yCAS0BxB,CAAAA,KAAK,CAACyB,IAAN,CAAW,sBAAX,CAAmCH,WAAnC,CAAgDC,MAAhD,CAT1B,QAScX,GATd,gBAUQH,QAAQ,CAAC,CACLI,IAAI,CAAE,iBADD,CAELC,OAAO,CAAEF,GAAG,CAACG,IAAJ,CAASA,IAFb,CAAD,CAAR,CAVR,mFAgBQN,QAAQ,CAAC,CACLI,IAAI,CAAE,mBADD,CAELC,OAAO,CAAE,aAAIM,OAAJ,CAAYL,IAAZ,CAAiBZ,KAFrB,CAAD,CAAR,CAhBR,sEA7C4C,iDAuE5C,mBAAQ,KAAC,aAAD,CAAe,QAAf,EAAwB,KAAK,CAAG,CACpCD,YAAY,CAAEM,KAAK,CAACN,YADgB,CAEpCC,KAAK,CAAEK,KAAK,CAACL,KAFuB,CAGpCC,OAAO,CAAEI,KAAK,CAACJ,OAHqB,CAIpCM,eAAe,CAAfA,eAJoC,CAKpCO,iBAAiB,CAAjBA,iBALoC,CAMpCI,cAAc,CAAdA,cANoC,CAAhC,UAQHd,QARG,EAAR,CAWH,CAlFM","sourcesContent":["\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios';\n\n\n// initial state\n\nconst initialState = {\n    transactions: [],\n    error: null,  // bc of our async await calls\n    loading: true // for spinner\n}\n // { id: 1, text: 'Flowers', amount: -20 },\n // { id: 2, text: 'Depop', amount: +25 },\n // { id: 4, text: 'Uber', amount: -11 },\n // { id: 5, text: 'Salary', amount: +2000}\n\n// global state\n// create context\n\nexport const GlobalContext = createContext(initialState);\n\n// in order for other components to have access to our globalState, we need to have a provider\n// we need to wrap all our components in a provider component\n// we need to export this to make it available to our App file\n\n// Provider component \n// all our components that we are wrapping are the children\n// whenever we want to call a reducer action, we call dispatch\n\nexport const GlobalProvider=  ( {children} ) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n    // this function below is to integrate our api\n    // axios returns a PROMISE, so our get action will have to be asynchronous\n    async function getTransactions() {\n        try{\n            // we make a requests and store it in this resposne variable\n            const res = await axios.get('/api/v1/transactions');\n\n            // res.data contains success, count, data. we only want data on the frontend\n            // we need to dispatch to our reducer\n            dispatch ({\n                type: 'GET_TRANSACTIONS',\n                payload: res.data.data\n            });\n        }\n\n        catch(err) {\n            dispatch ({\n            type: 'TRANSACTIONS_ERROR',\n            payload: err.response.data.error\n            });\n        }\n    }\n\n    async function deleteTransaction(id) {\n        try {\n            await axios.delete(`/api/v1/transactions/${id}`);\n            dispatch({\n                type: 'DELETE_TRANSACTION',\n                payload: id\n            });\n\n        } catch (err) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: err.reponse.data.error\n            });\n        \n        }\n    }\n\n\n    async function addTransaction(transaction) {\n        // since we are sending data, we need a content type\n        // so we create a config obj\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n            const res = await axios.post('/api/v1/transactions', transaction, config);\n            dispatch({\n                type: 'ADD_TRANSACTION',\n                payload: res.data.data\n              });\n            \n        } catch (err) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: err.reponse.data.error\n            });\n        }\n      }\n\n// to use an action, we need to make sure we pass it down in the provider\n// so we can access on of these in components\n\n    return( <GlobalContext.Provider value= {{\n        transactions: state.transactions,\n        error: state.error,\n        loading: state.loading,\n        getTransactions,\n        deleteTransaction,\n        addTransaction\n    }}>\n        {children}\n\n    </GlobalContext.Provider>);\n}\n"]},"metadata":{},"sourceType":"module"}
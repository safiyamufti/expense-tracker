{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/safiyamufti/Desktop/expense-tracker-react/client/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios'; // initial state\n\nconst initialState = {\n  transactions: [],\n  error: null,\n  // bc of our async await calls\n  loading: true // for spinner\n\n}; // { id: 1, text: 'Flowers', amount: -20 },\n// { id: 2, text: 'Depop', amount: +25 },\n// { id: 4, text: 'Uber', amount: -11 },\n// { id: 5, text: 'Salary', amount: +2000}\n// global state\n// create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // in order for other components to have access to our globalState, we need to have a provider\n// we need to wrap all our components in a provider component\n// we need to export this to make it available to our App file\n// Provider component \n// all our components that we are wrapping are the children\n// whenever we want to call a reducer action, we call dispatch\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n  // this function below is to integrate our api\n  // axios returns a PROMISE, so our get action will have to be asynchronous\n\n  async function getTransactions() {\n    try {\n      // we make a requests and store it in this resposne variable\n      const res = await axios.get('/api/v1/transactions'); // res.data contains success, count, data. we only want data on the frontend\n      // we need to dispatch to our reducer\n\n      dispatch({\n        type: 'GET_TRANSACTIONS',\n        payload: res.data.data\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TRANSACTIONS_ERROR',\n        payload: err.response.data.error\n      });\n    }\n  }\n\n  async function deleteTransaction(id) {\n    try {\n      await axios.delete(`/api/v1/transactions/${id}`);\n      dispatch({\n        type: 'DELETE_TRANSACTION',\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TRANSACTION_ERROR',\n        payload: err.reponse.data.error\n      });\n    }\n  }\n\n  async function addTransaction(transaction) {\n    // since we are sending data, we need a content type\n    // so we create a config obj\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/v1/transactions', transaction, config);\n      dispatch({\n        type: 'ADD_TRANSACTION',\n        payload: re\n      });\n    } catch (err) {}\n  } // to use an action, we need to make sure we pass it down in the provider\n  // so we can access on of these in components\n\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      error: state.error,\n      loading: state.loading,\n      getTransactions,\n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 13\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/safiyamufti/Desktop/expense-tracker-react/client/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","axios","initialState","transactions","error","loading","GlobalContext","GlobalProvider","children","state","dispatch","getTransactions","res","get","type","payload","data","err","response","deleteTransaction","id","delete","reponse","addTransaction","transaction","config","headers","post","re"],"mappings":";;;;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,EADG;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAEH;AACdC,EAAAA,OAAO,EAAE,IAHQ,CAGH;;AAHG,CAArB,C,CAKC;AACA;AACA;AACA;AAED;AACA;;AAEA,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAACI,YAAD,CAAnC,C,CAEP;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMK,cAAc,GAAG,CAAE;AAACC,EAAAA;AAAD,CAAF,KAAkB;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACC,UAAD,EAAaE,YAAb,CAApC,CAD4C,CAG5C;AACA;AACA;;AACA,iBAAeS,eAAf,GAAiC;AAC7B,QAAG;AACC;AACA,YAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,sBAAV,CAAlB,CAFD,CAIC;AACA;;AACAH,MAAAA,QAAQ,CAAE;AACNI,QAAAA,IAAI,EAAE,kBADA;AAENC,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASA;AAFZ,OAAF,CAAR;AAIH,KAVD,CAYA,OAAMC,GAAN,EAAW;AACPP,MAAAA,QAAQ,CAAE;AACVI,QAAAA,IAAI,EAAE,oBADI;AAEVC,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBZ;AAFjB,OAAF,CAAR;AAIH;AACJ;;AAED,iBAAee,iBAAf,CAAiCC,EAAjC,EAAqC;AACjC,QAAI;AACA,YAAMnB,KAAK,CAACoB,MAAN,CAAc,wBAAuBD,EAAG,EAAxC,CAAN;AACAV,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAE,oBADD;AAELC,QAAAA,OAAO,EAAEK;AAFJ,OAAD,CAAR;AAKH,KAPD,CAOE,OAAOH,GAAP,EAAY;AACVP,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAE,mBADD;AAELC,QAAAA,OAAO,EAAEE,GAAG,CAACK,OAAJ,CAAYN,IAAZ,CAAiBZ;AAFrB,OAAD,CAAR;AAKH;AACJ;;AAGD,iBAAemB,cAAf,CAA8BC,WAA9B,EAA2C;AACvC;AACA;AACA,UAAMC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;;AAKA,QAAI;AACA,YAAMd,GAAG,GAAG,MAAMX,KAAK,CAAC0B,IAAN,CAAW,sBAAX,EAAmCH,WAAnC,EAAgDC,MAAhD,CAAlB;AACAf,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAE,iBADD;AAELC,QAAAA,OAAO,EAAEa;AAFJ,OAAD,CAAR;AAKH,KAPD,CAOE,OAAOX,GAAP,EAAY,CAGb;AACF,GAhEyC,CAkEhD;AACA;;;AAEI,sBAAQ,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAG;AACpCd,MAAAA,YAAY,EAAEM,KAAK,CAACN,YADgB;AAEpCC,MAAAA,KAAK,EAAEK,KAAK,CAACL,KAFuB;AAGpCC,MAAAA,OAAO,EAAEI,KAAK,CAACJ,OAHqB;AAIpCM,MAAAA,eAJoC;AAKpCQ,MAAAA,iBALoC;AAMpCI,MAAAA;AANoC,KAAhC;AAAA,cAQHf;AARG;AAAA;AAAA;AAAA;AAAA,UAAR;AAWH,CAhFM;;GAAMD,c;;KAAAA,c","sourcesContent":["\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios';\n\n\n// initial state\n\nconst initialState = {\n    transactions: [],\n    error: null,  // bc of our async await calls\n    loading: true // for spinner\n}\n // { id: 1, text: 'Flowers', amount: -20 },\n // { id: 2, text: 'Depop', amount: +25 },\n // { id: 4, text: 'Uber', amount: -11 },\n // { id: 5, text: 'Salary', amount: +2000}\n\n// global state\n// create context\n\nexport const GlobalContext = createContext(initialState);\n\n// in order for other components to have access to our globalState, we need to have a provider\n// we need to wrap all our components in a provider component\n// we need to export this to make it available to our App file\n\n// Provider component \n// all our components that we are wrapping are the children\n// whenever we want to call a reducer action, we call dispatch\n\nexport const GlobalProvider=  ( {children} ) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n    // this function below is to integrate our api\n    // axios returns a PROMISE, so our get action will have to be asynchronous\n    async function getTransactions() {\n        try{\n            // we make a requests and store it in this resposne variable\n            const res = await axios.get('/api/v1/transactions');\n\n            // res.data contains success, count, data. we only want data on the frontend\n            // we need to dispatch to our reducer\n            dispatch ({\n                type: 'GET_TRANSACTIONS',\n                payload: res.data.data\n            });\n        }\n\n        catch(err) {\n            dispatch ({\n            type: 'TRANSACTIONS_ERROR',\n            payload: err.response.data.error\n            });\n        }\n    }\n\n    async function deleteTransaction(id) {\n        try {\n            await axios.delete(`/api/v1/transactions/${id}`);\n            dispatch({\n                type: 'DELETE_TRANSACTION',\n                payload: id\n            });\n\n        } catch (err) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: err.reponse.data.error\n            });\n        \n        }\n    }\n\n\n    async function addTransaction(transaction) {\n        // since we are sending data, we need a content type\n        // so we create a config obj\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n            const res = await axios.post('/api/v1/transactions', transaction, config);\n            dispatch({\n                type: 'ADD_TRANSACTION',\n                payload: re\n              });\n            \n        } catch (err) {\n\n            \n        }\n      }\n\n// to use an action, we need to make sure we pass it down in the provider\n// so we can access on of these in components\n\n    return( <GlobalContext.Provider value= {{\n        transactions: state.transactions,\n        error: state.error,\n        loading: state.loading,\n        getTransactions,\n        deleteTransaction,\n        addTransaction\n    }}>\n        {children}\n\n    </GlobalContext.Provider>);\n}\n"]},"metadata":{},"sourceType":"module"}
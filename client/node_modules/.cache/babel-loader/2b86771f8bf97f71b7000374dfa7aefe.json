{"ast":null,"code":"// App Reducer will help specify app state changes in response to our (global) context\n//  it takes in state and an action\n//  we have 3 action types: default/add/delete transaction\n// DELETE_TRANSACTION case- reducer is a way to change the state and send it down to the app\n//  in this case, we have to create a new state (that excludes the deleted transaction)\n//  and pass it down. we create a new one bc we cant really change the existing state\nexport default ((state, action) => {\n  switch (action.type) {\n    case 'DELETE_TRANSACTION':\n      console.log(action.payload);\n      return { ...state,\n        transactions: state.transactions.filter(transaction => transaction.id != action.payload, console.log(transaction.id))\n      };\n\n    case 'ADD_TRANSACTION':\n      return { ...state,\n        // we add our new transaction do our existing ones\n        transactions: [action.payload, ...state.transactions]\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/safiyamufti/Desktop/expense-tracker-react/src/context/AppReducer.js"],"names":["state","action","type","console","log","payload","transactions","filter","transaction","id"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA,gBAAc,CAACA,KAAD,EAAQC,MAAR,KAAmB;AAC7B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,oBAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACC,aAAO,EACH,GAAGL,KADA;AAEHM,QAAAA,YAAY,EACZN,KAAK,CAACM,YAAN,CAAmBC,MAAnB,CAA0BC,WAAW,IAAIA,WAAW,CAACC,EAAZ,IAAkBR,MAAM,CAACI,OAAlE,EACDF,OAAO,CAACC,GAAR,CAAYI,WAAW,CAACC,EAAxB,CADC;AAHG,OAAP;;AAML,SAAK,iBAAL;AACQ,aAAO,EACL,GAAGT,KADE;AAEL;AACAM,QAAAA,YAAY,EAAE,CAACL,MAAM,CAACI,OAAR,EAAiB,GAAGL,KAAK,CAACM,YAA1B;AAHT,OAAP;;AAKR;AACI,aAAON,KAAP;AAhBR;AAkBH,CAnBD","sourcesContent":["// App Reducer will help specify app state changes in response to our (global) context\n//  it takes in state and an action\n//  we have 3 action types: default/add/delete transaction\n\n// DELETE_TRANSACTION case- reducer is a way to change the state and send it down to the app\n//  in this case, we have to create a new state (that excludes the deleted transaction)\n//  and pass it down. we create a new one bc we cant really change the existing state\n\nexport default(state, action) => {\n    switch(action.type) {\n        case 'DELETE_TRANSACTION':\n            console.log(action.payload);\n             return {\n                 ...state,\n                 transactions: \n                 state.transactions.filter(transaction => transaction.id != action.payload, \n                console.log(transaction.id))\n             }\n        case 'ADD_TRANSACTION':\n                return {\n                  ...state,\n                  // we add our new transaction do our existing ones\n                  transactions: [action.payload, ...state.transactions]\n                }\n        default:\n            return state; \n    }\n}"]},"metadata":{},"sourceType":"module"}
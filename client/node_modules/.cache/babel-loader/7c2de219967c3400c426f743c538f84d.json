{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/safiyamufti/Desktop/expense-tracker-react/client/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer'; // initial state\n\nconst initialState = {\n  transactions: [] // { id: 1, text: 'Flowers', amount: -20 },\n  // { id: 2, text: 'Depop', amount: +25 },\n  // { id: 4, text: 'Uber', amount: -11 },\n  // { id: 5, text: 'Salary', amount: +2000}\n\n}; // global state\n// create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // in order for other components to have access to our globalState, we need to have a provider\n// we need to wrap all our components in a provider component\n// we need to export this to make it available to our App file\n// Provider component \n// all our components that we are wrapping are the children\n// whenever we want to call a reducer action, we call dispatch\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n  // this \n  // axios returns a PROMISE, so our get action will have to be asynchronous\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n    console.log(id);\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  } // to use an action, we need to make sure we pass it down in the provider\n\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 13\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/safiyamufti/Desktop/expense-tracker-react/client/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","transactions","GlobalContext","GlobalProvider","children","state","dispatch","deleteTransaction","id","type","payload","console","log","addTransaction","transaction"],"mappings":";;;;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAGA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,EADG,CAEb;AACA;AACA;AACA;;AALa,CAArB,C,CAQA;AACA;;AAEA,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAACG,YAAD,CAAnC,C,CAEP;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMG,cAAc,GAAG,CAAE;AAACC,EAAAA;AAAD,CAAF,KAAkB;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACC,UAAD,EAAaC,YAAb,CAApC,CAD4C,CAG5C;AACA;AACA;;AAEA,WAASO,iBAAT,CAA2BC,EAA3B,EAA+B;AAC3BF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAE,oBADD;AAELC,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;AACH;;AAGD,WAASK,cAAT,CAAwBC,WAAxB,EAAqC;AACjCR,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,iBADC;AAEPC,MAAAA,OAAO,EAAEI;AAFF,KAAD,CAAR;AAID,GArByC,CAuBhD;;;AAEI,sBAAQ,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAG;AACpCb,MAAAA,YAAY,EAAEI,KAAK,CAACJ,YADgB;AAEpCM,MAAAA,iBAFoC;AAGpCM,MAAAA;AAHoC,KAAhC;AAAA,cAKHT;AALG;AAAA;AAAA;AAAA;AAAA,UAAR;AAQH,CAjCM;;GAAMD,c;;KAAAA,c","sourcesContent":["\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n\n// initial state\n\nconst initialState = {\n    transactions: [ ]\n        // { id: 1, text: 'Flowers', amount: -20 },\n        // { id: 2, text: 'Depop', amount: +25 },\n        // { id: 4, text: 'Uber', amount: -11 },\n        // { id: 5, text: 'Salary', amount: +2000}\n}\n\n// global state\n// create context\n\nexport const GlobalContext = createContext(initialState);\n\n// in order for other components to have access to our globalState, we need to have a provider\n// we need to wrap all our components in a provider component\n// we need to export this to make it available to our App file\n\n// Provider component \n// all our components that we are wrapping are the children\n// whenever we want to call a reducer action, we call dispatch\n\nexport const GlobalProvider=  ( {children} ) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n    // this \n    // axios returns a PROMISE, so our get action will have to be asynchronous\n\n    function deleteTransaction(id) {\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n        });\n        console.log(id);\n    }\n\n\n    function addTransaction(transaction) {\n        dispatch({\n          type: 'ADD_TRANSACTION',\n          payload: transaction\n        });\n      }\n\n// to use an action, we need to make sure we pass it down in the provider\n\n    return( <GlobalContext.Provider value= {{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction\n    }}>\n        {children}\n\n    </GlobalContext.Provider>);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
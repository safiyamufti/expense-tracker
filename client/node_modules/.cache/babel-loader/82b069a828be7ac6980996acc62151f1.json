{"ast":null,"code":"import _toConsumableArray from\"/Users/safiyamufti/Desktop/expense-tracker-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/safiyamufti/Desktop/expense-tracker-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";// App Reducer will help specify app state changes in response to our (global) context\n//  it takes in state and an action\n//  we have 3 action types: default/add/delete transaction\n// DELETE_TRANSACTION case- reducer is a way to change the state and send it down to the app\n//  in this case, we have to create a new state (that excludes the deleted transaction)\n//  and pass it down. we create a new one bc we cant really change the existing state\nexport default(function(state,action){switch(action.type){case'GET_TRANSACTIONS':return _objectSpread(_objectSpread({},state),{},{loading:false,transactions:action.payload// transactions was initially an empty array, no we fill it up with our payload\n});case'TRANSACTIONS_ERROR':return _objectSpread(_objectSpread({},state),{},{error:action.payload});case'DELETE_TRANSACTION':console.log(action.payload);return _objectSpread(_objectSpread({},state),{},{transactions:state.transactions.filter(function(transaction){return transaction._id!==action.payload;})});case'ADD_TRANSACTION':return _objectSpread(_objectSpread({},state),{},{// we add our new transaction to our existing ones\ntransactions:[].concat(_toConsumableArray(state.transactions),[action.payload])});default:return state;}});","map":{"version":3,"sources":["/Users/safiyamufti/Desktop/expense-tracker-react/client/src/context/AppReducer.js"],"names":["state","action","type","loading","transactions","payload","error","console","log","filter","transaction","_id"],"mappings":"mWAAA;AACA;AACA;AAEA;AACA;AACA;AAEA,eAAc,SAACA,KAAD,CAAQC,MAAR,CAAmB,CAC7B,OAAOA,MAAM,CAACC,IAAd,EACI,IAAK,kBAAL,CACI,sCACOF,KADP,MAEIG,OAAO,CAAE,KAFb,CAGIC,YAAY,CAAEH,MAAM,CAACI,OAAQ;AAHjC,GAKJ,IAAK,oBAAL,CACI,sCACOL,KADP,MAEIM,KAAK,CAAEL,MAAM,CAACI,OAFlB,GAKJ,IAAK,oBAAL,CACIE,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACI,OAAnB,EACC,sCACOL,KADP,MAEII,YAAY,CACZJ,KAAK,CAACI,YAAN,CAAmBK,MAAnB,CAA0B,SAAAC,WAAW,QACjCA,CAAAA,WAAW,CAACC,GAAZ,GAAoBV,MAAM,CAACI,OADM,EAArC,CAHJ,GAML,IAAK,iBAAL,CACQ,sCACKL,KADL,MAEE;AACAI,YAAY,8BAAMJ,KAAK,CAACI,YAAZ,GAA0BH,MAAM,CAACI,OAAjC,EAHd,GAKR,QACI,MAAOL,CAAAA,KAAP,CA5BR,CA8BH,CA/BD","sourcesContent":["// App Reducer will help specify app state changes in response to our (global) context\n//  it takes in state and an action\n//  we have 3 action types: default/add/delete transaction\n\n// DELETE_TRANSACTION case- reducer is a way to change the state and send it down to the app\n//  in this case, we have to create a new state (that excludes the deleted transaction)\n//  and pass it down. we create a new one bc we cant really change the existing state\n\nexport default(state, action) => {\n    switch(action.type) {\n        case 'GET_TRANSACTIONS':\n            return {\n                ...state,\n                loading: false,\n                transactions: action.payload // transactions was initially an empty array, no we fill it up with our payload\n            }\n        case 'TRANSACTIONS_ERROR':\n            return {\n                ...state,\n                error: action.payload\n\n            }\n        case 'DELETE_TRANSACTION':\n            console.log(action.payload);\n             return {\n                 ...state,\n                 transactions: \n                 state.transactions.filter(transaction =>\n                     transaction._id !== action.payload)\n             }\n        case 'ADD_TRANSACTION':\n                return {\n                  ...state,\n                  // we add our new transaction to our existing ones\n                  transactions: [...state.transactions, action.payload]\n                }\n        default:\n            return state; \n    }\n}"]},"metadata":{},"sourceType":"module"}